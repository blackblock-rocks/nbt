plugins {
    id "java-library"
    id 'maven-publish'
}

/**
 * Version setup
 */
def baseVersion = project.project_version
def baseGroup = project.maven_group
def localPropertiesFile = file('local.properties')
def localProperties = new Properties()

if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}

def envVars = System.getenv()
def currentEnvironment = envVars.getOrDefault("ENV", localProperties.getProperty("environment", "dev"))
def isDevelopment = currentEnvironment == "dev"
def localRepoDir = null
ext.versionModifier = null

if (localProperties.hasProperty("localRepoDir")) {
    localRepoDir = localProperties.getProperty("localRepoDir")
} else if (project.hasProperty("localRepoDir")) {
    localRepoDir = project.findProperty("localRepoDir")
}

if (isDevelopment) {
    versionModifier = "-SNAPSHOT"
}

def constructVersion(baseVersion) {
    def result = baseVersion + versionModifier
    return result
}

version = constructVersion(baseVersion)
group = baseGroup

println("Info: currentEnvironment = $currentEnvironment")
println("Info: isDevelopment = $isDevelopment")
println("Info: localRepoDir = $localRepoDir")
println("Info: versionModifier = $versionModifier")
println("Info: version = " + version)

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()

    maven {
        name "mojang"
        url "https://libraries.minecraft.net/"
    }

    if (isDevelopment && localRepoDir) {
        maven {
            url localRepoDir
        }
    }
}

dependencies {
    implementation "org.apache.commons:commons-lang3:$lang3"
    implementation "com.google.code.gson:gson:$gson"

    compileOnly "org.projectlombok:lombok:$lombok"
    annotationProcessor "org.projectlombok:lombok:$lombok"

    testCompileOnly "org.projectlombok:lombok:$lombok"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier.set("javadoc")
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        repositories {
            if (envVars.MAVEN_URL) {
                maven {
                    credentials {
                        username envVars.MAVEN_USERNAME
                        password envVars.MAVEN_PASSWORD
                    }
                    url envVars.MAVEN_URL
                }
            } else {
                mavenLocal()
            }

            if (isDevelopment) {

                if (localRepoDir) {
                    maven {
                        name = 'local'
                        url = uri(localRepoDir)
                    }
                } else {
                    mavenLocal()
                }
            }
        }
    }
}
